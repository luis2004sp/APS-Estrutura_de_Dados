
package agenda;

import javax.swing.JFrame;

public class JFrameAgenda extends JFrame {

    /**
     * Cria o Jframe que exibe a agenda de contatos
     */
    public Object list;
    public ListaCircular lc;
    public int tamanho;
    
            
    public JFrameAgenda(Object L) {
        setLista(L);
        lc = (ListaCircular) L;
        
        lc.organizaLista();
        
        //this.tamanho = lc.getQuantidade();
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

  
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listaContato = new javax.swing.JList<>();
        txtNome = new javax.swing.JLabel();
        fieldNome = new javax.swing.JTextField();
        fieldEmail = new javax.swing.JTextField();
        txtEmail = new javax.swing.JLabel();
        txtTipo = new javax.swing.JLabel();
        optionTipo = new javax.swing.JComboBox<>();
        fieldTelefone = new javax.swing.JFormattedTextField();
        txtTelefone = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        areaObservacao = new javax.swing.JTextArea();
        buttonSalvar = new javax.swing.JButton();
        buttonAdicionar = new javax.swing.JButton();
        buttonDeletar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 240, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        listaContato.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        listaContato.setModel(new javax.swing.AbstractListModel<Object>() {
            Object ctt[] = (Object[]) getContato();
            public int getSize() { return ctt.length; }
            public Object getElementAt(int i) { return ctt[i]; }
        }
    );
    listaContato.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    listaContato.setToolTipText("");
    listaContato.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    listaContato.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
        public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
            listaContatoValueChanged(evt);
        }
    });
    jScrollPane1.setViewportView(listaContato);

    txtNome.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    txtNome.setText("Nome");

    fieldNome.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

    fieldEmail.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

    txtEmail.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    txtEmail.setText("Email");

    txtTipo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    txtTipo.setText("Tipo do Numero :");

    optionTipo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    optionTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Celular", "Casa", "Empresa" }));

    try {
        fieldTelefone.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##) #####-####")));
    } catch (java.text.ParseException ex) {
        ex.printStackTrace();
    }
    fieldTelefone.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

    txtTelefone.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    txtTelefone.setText("Telefone");

    jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jLabel5.setText("Observações :");

    areaObservacao.setColumns(20);
    areaObservacao.setRows(5);
    jScrollPane2.setViewportView(areaObservacao);

    buttonSalvar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
    buttonSalvar.setActionCommand("Salvar");
    buttonSalvar.setLabel("Salvar ");
    buttonSalvar.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            buttonSalvarMouseClicked(evt);
        }
    });

    buttonAdicionar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
    buttonAdicionar.setText("Adicionar ");
    buttonAdicionar.setActionCommand("Salvar");
    buttonAdicionar.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            buttonAdicionarMouseClicked(evt);
        }
    });

    buttonDeletar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
    buttonDeletar.setText("Deletar");
    buttonDeletar.setActionCommand("Salvar");
    buttonDeletar.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            buttonDeletarMouseClicked(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGap(37, 37, 37)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                .addComponent(buttonAdicionar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtTelefone)
                                        .addComponent(fieldTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(73, 73, 73)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtTipo)
                                        .addComponent(optionTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(44, 44, 44))
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(buttonDeletar, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(buttonSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtNome)
                        .addComponent(fieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtEmail)
                        .addComponent(fieldEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(81, 81, 81))))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGap(37, 37, 37)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtNome)
                        .addComponent(txtEmail))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(fieldNome)
                        .addComponent(fieldEmail))
                    .addGap(147, 147, 147)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(txtTipo)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(optionTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(txtTelefone)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(fieldTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(18, 18, 18)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(buttonSalvar)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAdicionar)
                    .addComponent(buttonDeletar)))
            .addContainerGap(20, Short.MAX_VALUE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Listenner que detecta a mudança de contato selecionado e exibe o novo selecionado
     * 
     * @param evt Os detalhes do evento que acionou o metodo que é um listenner
     */
    private void listaContatoValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaContatoValueChanged
        
        if(evt.getValueIsAdjusting() != false){
            exibirContato(lc.busca(listaContato.getSelectedIndex()));
        }
    }//GEN-LAST:event_listaContatoValueChanged
    /**
     * Serve pra salvar as informações do contato caso tenha sido editada
     * 
     * @param evt os detalhes do evento que acionou o metodo que é um listenner
     * 
     */
    private void buttonSalvarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonSalvarMouseClicked

        //previne do usuario não ter selecionado nenhum item e tentar salvar
        
        if(listaContato.getSelectedIndex()==-1){
            return;
        }
        
        
        // encontra o contato ativo e passa o novo valor pro objeto na lista
        lc.busca(listaContato.getSelectedIndex()).setNome(fieldNome.getText());
        lc.busca(listaContato.getSelectedIndex()).setEmail(fieldEmail.getText());
        lc.busca(listaContato.getSelectedIndex()).setTelefone(fieldTelefone.getText());
        lc.busca(listaContato.getSelectedIndex()).setTipo(optionTipo.getSelectedIndex());
        lc.busca(listaContato.getSelectedIndex()).setObservacao(areaObservacao.getText());
        
        //atualiza a lista exibida na tela
        atualizaLista();
        
    }//GEN-LAST:event_buttonSalvarMouseClicked

    /**
     * Serve pra abrir a tela de cadastro de um novo contato
     * 
     * @param evt os detalhes do evento que acionou o metodo que é um listenner
     * 
     */
    
    
    private void buttonAdicionarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonAdicionarMouseClicked
        addConta.setListaAdiciona(lc);
        addConta.setVisible(true);
    }//GEN-LAST:event_buttonAdicionarMouseClicked
    
    /**
     * Serve pra atualizar a lista toda vez que o usuario focar nesta tela
     * 
     * @param evt os detalhes do evento que acionou o metodo que é um listenner
     * 
     */
    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        //previne erro da lista de AdicionarContato ainda estiver vazia
        if( addConta.getListaAdiciona()!=null){ 
            lc = addConta.getListaAdiciona();
        }
        atualizaLista();
    }//GEN-LAST:event_formWindowGainedFocus
    
    /**
     * Serve pra apagar um contato da lista
     * 
     * @param evt os detalhes do evento que acionou o metodo que é um listenner
     * 
     */
    private void buttonDeletarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonDeletarMouseClicked
        //previne o usuario de clickar no botão sem ter selecionado o que apagar
        if(listaContato.getSelectedIndex() == -1){
            return;
        }
        
        //remove o contato
        lc.remove(lc.busca(listaContato.getSelectedIndex()).getTelefone());
        
        //limpa os campos de exibição
        fieldEmail.setText("");
        fieldNome.setText("");
        fieldTelefone.setText("");
        areaObservacao.setText("");
        optionTipo.setSelectedIndex(0);
        
        //atualiza a lista de contatos
        atualizaLista();
        listaContato.setSelectedIndex(-1);
    }//GEN-LAST:event_buttonDeletarMouseClicked

    
    
    /*public static void main(String args[]) {
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameAgenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameAgenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameAgenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameAgenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form 
        java.awt.EventQueue.invokeLater(() -> {
            new JFrameAgenda().setVisible(true);
        });
    }*/
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaObservacao;
    private javax.swing.JButton buttonAdicionar;
    private javax.swing.JButton buttonDeletar;
    private javax.swing.JButton buttonSalvar;
    private javax.swing.JTextField fieldEmail;
    private javax.swing.JTextField fieldNome;
    private javax.swing.JFormattedTextField fieldTelefone;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<Object> listaContato;
    private javax.swing.JComboBox<String> optionTipo;
    private javax.swing.JLabel txtEmail;
    private javax.swing.JLabel txtNome;
    private javax.swing.JLabel txtTelefone;
    private javax.swing.JLabel txtTipo;
    // End of variables declaration//GEN-END:variables
    AdicionarContato addConta = new AdicionarContato(lc);
    
    
//public Object[] aContatos = new Object[this.tamanho];
    
    /**
     *  Cria um array para ser a lista de nomes
     *  
     *  @return Será um objeto do tipo Array de Strings com os nomes dos contatos
     */
    public Object getContato(){
        //organizar em ordem alfabetica antes de exibir
        lc.organizaLista();
        
        int x = 0;
        //System.out.println(" LISTACIRCULAR "+lc);
        int y = lc.getQuantidade();
        
        Object aContatos[] = new Object[y];
        
        while(x < y){  
            Contato ctt;
            ctt = lc.busca(x);
            aContatos[x] = ctt.getNome();
            //System.out.println(lc.busca(0));
            x++;
        }
        
        return aContatos;
    }
    /**
     *  Define a lista a ser usada pelo código e exibida em tela
     *  
     *  @param L é a lista a ser usada
     */
    public void setLista(Object L){
        lc = (ListaCircular) L;
    }

    /**
     *  Define os campos para exibir ao usuario e disponibilizar a edição
     * 
     *  @param ctt recebe a referencia de qual contato estará sendo exibido
     *  
     */
    private void exibirContato(Contato ctt) {
        
        fieldEmail.setText(ctt.getEmail());
        fieldNome.setText(ctt.getNome());
        fieldTelefone.setText(ctt.getTelefone());
        areaObservacao.setText(ctt.getObservacao());
        optionTipo.setSelectedIndex(ctt.getTipo());
        
    }
    
    /**
     *  Atualiza a lista de contatos exibida em tela
     */
    private void atualizaLista(){
        //ordenar a lista
        lc.organizaLista();
    
        //atualizar a exibição
        listaContato.setModel(new javax.swing.AbstractListModel<Object>() {
            Object ctt[] = (Object[]) getContato();
            @Override
            public int getSize() { return ctt.length; }
            @Override
            public Object getElementAt(int i) { return ctt[i]; }
        });
        
    }
    
    
    
    
}
